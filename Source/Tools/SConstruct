# Runtime/Tools/SConstruct
# Builds tools library
# Copyright (c) 2010 Sunside Inc., All Rights Reserved
# Author: Joe Riedel
# See Radiance/LICENSE for licensing terms.

Import('radvars')
Import('boost_threads')
Import('radiance_runtime')
Import('variant_dir')
(build, source) = radvars

maxpath = './Extern/Max9SDK'

def dpak():
	x = build.exeBuilder('dpak', build, source, '.', variant_dir, 'CON')
	x.add('DPak.cpp')
	x.add(radiance_runtime, type='lib')
	x.add(boost_threads, type='lib')
	x.create()

def setMaxPluginExt(source):
	source['SHLIBSUFFIX'] = '.dle'
	return source
	
def maxPluginShell(name, path):
	x = build.dllBuilder(name, build, source, '.', variant_dir, '3DSPLUGIN')
	addMaxPaths(x.source)
	x.add(path + '/Shell.cpp')
	setMaxPluginExt(x.source)
	x.create()
	
def maxPlugin(name, path, standalone=False):
	x = build.qtBuilder(name, build, source, '.', variant_dir, '3DSPLUGIN')
	if standalone:
		build.backend.addDefine(x.source, 'SHELL_STANDALONE')
		setMaxPluginExt(x.source)
	else:
		maxPluginShell(name + 'Shell', path)
	addMaxPaths(x.source)
	return x
	
def sceneExportPlugin():
	x = maxPlugin('RadSceneExport', 'Max/SceneExport', not build.switches.dbginfo())
	x.add('Max/SceneExport/Plugin.cpp')
	x.add('Max/QtSupport.cpp')
	x.create()
	
def sceneExport():
	
	sceneExportPlugin()
	
def qtTest():
	uic = build.uicMocBuilder(build, source, '.', variant_dir)
	uic.add('QtTest/MainWindow.ui', type='uic')
	
	moc = build.uicMocBuilder(build, source, '.', variant_dir)
	moc.add('QtTest/MainWindow.h', type='moc')
	
	x = build.qtBuilder('qtTest', build, source, uic, moc, '.', variant_dir)
	x.add('QtTest/Main.cpp')
	x.add('QtTest/MainWindow.cpp')
	x.create()
			
###############################################################################
# Misc tools
###############################################################################

dpak()

root = variant_dir

if build.win():
	variant_dir = root + '/_Bsp'
	SConscript(
		'Bsp.SConstruct', 
		variant_dir='_Bsp', 
		duplicate=0,
		exports='variant_dir'
	)

variant_dir = root + '/_QtTest'
SConscript(
	'QtTest/SConstruct', 
	variant_dir='_QtTest', 
	duplicate=0,
	exports='variant_dir'
)
