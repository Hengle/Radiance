# Engine/SConstruct
# Builds engine library
# Copyright (c) 2010 2010 Sunside Inc., All Rights Reserved
# Author: Joe Riedel
# See Radiance/LICENSE for licensing terms.

Import('radvars')
Import('variant_dir')
(build, source) = radvars
	
def link_qt():
	return build.tools() and build.pc()
	
def getbuilder():
	if link_qt():
		x = build.qtBuilder('Engine', build, source, '.', variant_dir, 'LIB')
		return x				
	x = build.libBuilder('Engine', build, source, '.', variant_dir)
	return x
	
x = getbuilder()
build.backend.configLua(x.source) # we use lua
build.backend.addOpenALPaths(x.source)
build.backend.addDefine(x.source, 'RADENG_OPT_EXPORT')
# add ogg/vorbis
build.backend.addIncludePath(x.source, [build.absPath('./Extern/libogg-1.2.2/include')])
build.backend.addIncludePath(x.source, [build.absPath('./Extern/libvorbis-1.3.2/include')])

###############################################################################
# Tools Library, linked in by engine in tools builds
###############################################################################

def editor(x):

	def map_editor():
		x.moc('Tools/Editor/MapEditor/EditorMapEditorWindow')
		
	def editors():
		map_editor()
		x.moc('Tools/Editor/EditorWindow')
		x.moc('Tools/Editor/EditorMeshEditorWindow')
		x.moc('Tools/Editor/EditorSkModelEditorWindow')
		x.moc('Tools/Editor/EditorStringTableEditorWindow')
		
	def content_browser():
		x.moc('Tools/Editor/ContentBrowser/EditorContentChoosePackageDialog')
		x.moc('Tools/Editor/ContentBrowser/EditorContentBrowserView')
		x.moc('Tools/Editor/ContentBrowser/EditorContentBrowserWindow')
		x.moc('Tools/Editor/ContentBrowser/EditorContentBrowserTree')
		x.moc('Tools/Editor/ContentBrowser/EditorContentBrowserModel')
		x.add('Tools/Editor/ContentBrowser/EditorContentBrowserViewSort.cpp')
		x.moc('Tools/Editor/ContentBrowser/EditorContentImportFieldWidget')
		x.add('Tools/Editor/ContentBrowser/EditorContentThumbCache.cpp')
		x.add('Tools/Editor/ContentBrowser/EditorTextureThumb.cpp')
		x.moc('Tools/Editor/ContentBrowser/EditorContentPropertyGrid')
		x.add('Tools/Editor/ContentBrowser/EditorContentProperties.cpp')
		x.add('Tools/Editor/ContentBrowser/EditorContentTexture.cpp')
		x.moc('Tools/Editor/ContentBrowser/EditorMapThumb')
		x.moc('Tools/Editor/ContentBrowser/EditorMaterialThumb')
		x.moc('Tools/Editor/ContentBrowser/EditorMeshThumb')
		x.moc('Tools/Editor/ContentBrowser/EditorSkModelThumb')
		x.moc('Tools/Editor/ContentBrowser/EditorStringTableThumb')
		x.add('Tools/Editor/ContentBrowser/EditorSoundThumb.cpp')
		x.add('Tools/Editor/ContentBrowser/EditorMusicThumb.cpp')
	
	def property_grid():
		x.moc('Tools/Editor/PropertyGrid/EditorProperty')
		x.moc('Tools/Editor/PropertyGrid/EditorPropertyGrid')
		x.moc('Tools/Editor/PropertyGrid/EditorPropertyGridModel')
		x.moc('Tools/Editor/PropertyGrid/EditorPropertyGridItemDelegate')
		x.moc('Tools/Editor/PropertyGrid/EditorWidgetPropertyEditors')
		x.moc('Tools/Editor/PropertyGrid/EditorFilePathFieldWidget')
		x.moc('Tools/Editor/PropertyGrid/EditorColorFieldWidget')
	
	x.moc('Tools/Editor/EditorComboCheckBox')
	x.moc('Tools/Editor/EditorCookerDialog')
	x.moc('Tools/Editor/EditorGLNavWidget')
	x.moc('Tools/Editor/EditorGLWidget')
	x.moc('Tools/Editor/EditorLineEditDialog')
	x.moc('Tools/Editor/EditorSearchLineWidget')
	x.moc('Tools/Editor/EditorStringTableWidget')
	x.moc('Tools/Editor/EditorStringTableWidgetItemModel')
	x.moc('Tools/Editor/EditorTextEditorDialog')
	x.moc('Tools/Editor/EditorLogWindow')
	x.moc('Tools/Editor/EditorMainWindow')
	x.moc('Tools/Editor/EditorPIEWidget')
	x.moc('Tools/Editor/EditorPopupMenu')
	x.moc('Tools/Editor/EditorProgressDialog')
	x.add('Tools/Editor/EditorTickState.cpp')
	x.add('Tools/Editor/EditorUtils.cpp')
	x.moc('Tools/Editor/EditorZoneViewWindow')
	
	content_browser()
	property_grid()
	editors()
	
def pctools(x):
	build.backend.addIncludePath(x.source, build.absPath('./Extern/PVRTexLib'))
	x.add('Assets/AssetCookers.cpp')
	x.add('Assets/FontCooker.cpp')
	x.add('Assets/MapCooker.cpp')
	x.add('Assets/MaterialCooker.cpp')
	x.add('Assets/MeshCooker.cpp')
	x.add('Assets/MusicCooker.cpp')
	x.add('Assets/TextureCooker.cpp')
	x.add('Assets/TypefaceCooker.cpp')
	x.add('Assets/SkModelCooker.cpp')
	x.add('Assets/SkAnimSetCooker.cpp')
	x.add('Assets/SkAnimStatesCooker.cpp')
	x.add('Assets/SoundCooker.cpp')
	x.add('Assets/StringTableCooker.cpp')
	editor(x)
	
def tools(x):
	x.add('Assets/MapParser.cpp')
	x.add('Packages/PackageCooker.cpp')
	x.add('Packages/PackageTools.cpp')
	x.add('SkAnim/SkBuilder.cpp')
	x.add('Tools/Progress.cpp')
	x.add('Tools/MaxScene.cpp')
	x.add('World/MapBuilder/MapBuilder.cpp')
	x.add('World/MapBuilder/BoxBSP/BoxBSP.cpp')
	x.add('Renderer/CG/CGShader.cpp')
	x.add('Renderer/CG/CGUtils.cpp')
	x.add('Renderer/GL/GLSLTool.cpp')

###############################################################################
# Engine Library
###############################################################################

def assets(x):
	x.add('Assets/FontParser.cpp')
	x.add('Assets/MapAsset.cpp')
	x.add('Assets/MaterialParser.cpp')
	x.add('Assets/MeshBundle.cpp')
	x.add('Assets/MeshParser.cpp')
	x.add('Assets/MeshMaterialLoader.cpp')
	x.add('Assets/MusicParser.cpp')
	x.add('Assets/SkAnimSetParser.cpp')
	x.add('Assets/SkAnimStatesParser.cpp')
	x.add('Assets/SkMaterialLoader.cpp')
	x.add('Assets/SkModelParser.cpp')
	x.add('Assets/SoundParser.cpp')
	x.add('Assets/SoundLoader.cpp')
	x.add('Assets/StringTableParser.cpp')
	x.add('Assets/TextureParser.cpp')
	x.add('Assets/TypefaceParser.cpp')
	
def entities(x):
	x.add('World/Entities/E_Exports.cpp')
	x.add('World/Entities/E_SplineTrack.cpp')
	x.add('World/Entities/E_SoundEmitter.cpp')
	x.add('World/Entities/E_ViewController.cpp')
		
x.add('App.cpp')
x.add('Assets/Assets.cpp')
x.add('Camera.cpp')
x.add('COut.cpp')
x.add('ComponentExports.cpp')
x.add('Engine.cpp')
x.add('FileSystem/FileSystemReflectMap.cpp')
x.add('FileSystem/Backend/FileSystem.cpp')
x.add('FileSystem/Backend/DPak.cpp')
x.add('Game/Game.cpp')
x.add('Game/GameNetwork.cpp')
x.add('Game/Gestures.cpp')
x.add('Game/GSLoadMap.cpp')
x.add('Game/GSPlay.cpp')
x.add('Game/WaveAnim.cpp')
x.add('Input.cpp')
x.add('LogFile.cpp')
x.add('Lua/LuaRuntime.cpp')
x.add('MathUtils.cpp')
x.add('Packages/Packages.cpp')
x.add('Persistence.cpp')
x.add('Physics/Spring.cpp')
x.add('Renderer/Material.cpp')
x.add('Renderer/Mesh.cpp')
x.add('Renderer/Renderer.cpp')
x.add('Renderer/Shader.cpp')
x.add('Renderer/SkMesh.cpp')
x.add('Renderer/TextModel.cpp')
x.add('SCC/SCC.cpp')
x.add('SkAnim/SkAnim.cpp')
x.add('SkAnim/SkControllers.cpp')
x.add('Sound.cpp')
x.add('StringTable.cpp')
x.add('World/BSPFile.cpp')
x.add('World/Entity.cpp')
x.add('World/EntityPhysics.cpp')
x.add('World/Keys.cpp')
x.add('World/Lua/D_Asset.cpp')
x.add('World/Lua/D_Material.cpp')
x.add('World/Lua/D_Mesh.cpp')
x.add('World/Lua/D_ScreenOverlay.cpp')
x.add('World/Lua/D_SkModel.cpp')
x.add('World/Lua/D_Sound.cpp')
x.add('World/Lua/D_Typeface.cpp')
x.add('World/Lua/LuaTask.cpp')
x.add('World/Lua/T_MaterialPrecache.cpp')
x.add('World/Lua/T_MeshPrecache.cpp')
x.add('World/Lua/T_Precache.cpp')
x.add('World/Lua/T_SkModelPrecache.cpp')
x.add('World/Lua/T_Spawn.cpp')
x.add('World/Lua/T_SoundPrecache.cpp')
x.add('World/Lua/T_TempSpawn.cpp')
x.add('World/Lua/T_TypefacePrecache.cpp')
x.add('World/Lua/T_Tick.cpp')
x.add('World/MT_Fly.cpp')
x.add('World/MT_Spline.cpp')
x.add('World/PostProcess.cpp')
x.add('World/ScreenOverlay.cpp')
x.add('World/ViewModel.cpp')
x.add('World/World.cpp')
x.add('World/WorldCinematics.cpp')
x.add('World/WorldDraw.cpp')
x.add('World/WorldLua.cpp')
x.add('World/WorldSpawn.cpp')
x.add('UI/UIWidget.cpp')
x.add('UI/UIMatWidget.cpp')
x.add('UI/UITextLabel.cpp')
x.add('Utils/Tokenizer.cpp')
x.add('Zones.cpp')

if build.pc():
	build.backend.addCgPaths(x.source)
	x.add('Renderer/PC/RBackend.cpp')
	x.add('Renderer/PC/RBAssets.cpp')
	x.add('Game/GameNetworkNull.cpp')
	
if build.ios():
	x.add('Renderer/IOS/RBackend.cpp')
	x.add('Renderer/IOS/RBAssets.cpp')

if build.gl():
	x.add('Renderer/GL/GLMaterial.cpp')
	x.add('Renderer/GL/GLMesh.cpp')
	x.add('Renderer/GL/GLRenderTarget.cpp')
	x.add('Renderer/GL/GLState.cpp')
	x.add('Renderer/GL/GLShader.cpp')
	x.add('Renderer/GL/GLSLShader.cpp')
	x.add('Renderer/GL/GLTable.cpp')
	x.add('Renderer/GL/GLTextModel.cpp')
	x.add('Renderer/GL/GLTexture.cpp')
	x.add('Renderer/GL/GLUIDraw.cpp')
	x.add('Renderer/GL/GLWorldDraw.cpp')
	
if build.tools():
	tools(x)
	
if build.pctools():
	pctools(x)
	
assets(x)
entities(x)

###############################################################################
# Export
###############################################################################

radiance_engine = (link_qt, x.create())
Export('radiance_engine')
