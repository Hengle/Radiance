// AxisAngle.inl
// Inlines for AxisAngle.h
// Copyright (c) 2010 Sunside Inc., All Rights Reserved
// Author: Mike Songy
// See Radiance/LICENSE for licensing terms.

namespace math {

//////////////////////////////////////////////////////////////////////////////////////////
// math::AxisAngle<T>::AxisAngle()
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
inline AxisAngle<T>::AxisAngle()
{
}

template <typename T>
inline AxisAngle<T>::AxisAngle(const Vector3<T> &axis, T radians) :
m_axis(axis.Unit()),
m_angle(radians)
{
}

template <typename T>
inline AxisAngle<T>::AxisAngle(const AxisAngle<T> &axisAngle) :
m_axis(axisAngle.m_axis),
m_angle(axisAngle.m_angle)
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// math::AxisAngle<T>::~AxisAngle()
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
inline AxisAngle<T>::~AxisAngle()
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// math::AxisAngle<T>::Axis()
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
inline const Vector3<T> &AxisAngle<T>::Axis() const
{
	return m_axis;
}

template <typename T>
inline void AxisAngle<T>::Axis(const Vector3<T> &axis)
{
	m_axis = axis.Unit();
}

//////////////////////////////////////////////////////////////////////////////////////////
// math::AxisAngle<T>::Angle()
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
inline T AxisAngle<T>::Angle() const
{
	return m_angle;
}

template <typename T>
inline void AxisAngle<T>::Angle(T radians)
{
	m_angle = radians;
}

//////////////////////////////////////////////////////////////////////////////////////////
// math::AxisAngle<T>::Initialize()
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
inline AxisAngle<T> &AxisAngle<T>::Initialize(const Vector3<T> &unitAxis, T angle)
{
	SetAxis(unitAxis);
	SetAngle(angle);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// math::AxisAngle<T>::operator=()
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
inline AxisAngle<T> &AxisAngle<T>::operator=(const AxisAngle<T> &axisAngle)
{
	m_axis = axisAngle.m_axis;
	m_angle = axisAngle.m_angle;
	return *this;
}

} // math

