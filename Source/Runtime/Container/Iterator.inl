// Iterator.inl
// Copyright (c) 2010 Sunside Inc., All Rights Reserved
// Author: Joe Riedel
// See Radiance/LICENSE for licensing terms.


namespace iterator {

//////////////////////////////////////////////////////////////////////////////////////////
//
// Base SimpleIterator Helper Template
//
// Used when a class wants to re-use another iterator type, but only overrides the Value() functions.
// The user of this class must implement the Value() routines.
//
//////////////////////////////////////////////////////////////////////////////////////////

template< typename IteratorType >
inline BaseSimpleIteratorHelper< IteratorType >::BaseSimpleIteratorHelper()
{
}

template< typename IteratorType >
inline BaseSimpleIteratorHelper< IteratorType >::~BaseSimpleIteratorHelper()
{
}

template< typename IteratorType >
inline void BaseSimpleIteratorHelper< IteratorType >::Next()
{
	++m_it;
}

template< typename IteratorType >
inline void BaseSimpleIteratorHelper< IteratorType >::Prev()
{
	--m_it;
}

template< typename IteratorType >
inline bool BaseSimpleIteratorHelper< IteratorType >::IsEqual(const Type& iterator) const
{
	return m_it == iterator.m_it;
}

template< typename IteratorType >
inline bool BaseSimpleIteratorHelper< IteratorType >::IsGreater(const Type& iterator) const
{
	return m_it > iterator.m_it;
}

template< typename IteratorType >
inline bool BaseSimpleIteratorHelper< IteratorType >::IsLess(const Type& iterator) const
{
	return m_it < iterator.m_it;
}

template< typename IteratorType >
inline bool BaseSimpleIteratorHelper< IteratorType >::IsValid() const
{
	return m_it;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// Forward Only SimpleIterator
//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::SimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline SimpleIterator< BaseIteratorType, ValueType >::SimpleIterator()
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::SimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline SimpleIterator< BaseIteratorType, ValueType >::SimpleIterator(const Type& it)
{
	m_base = it.m_base;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::SimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline SimpleIterator< BaseIteratorType, ValueType >::SimpleIterator(const BaseIteratorType& it)
{
	m_base = it;
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// Access.
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator * ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline ValueType const& SimpleIterator< BaseIteratorType, ValueType >::operator * ()  const
{
	return m_base.Value();
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// Forward.
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator ++ ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline SimpleIterator< BaseIteratorType, ValueType >& SimpleIterator< BaseIteratorType, ValueType >::operator ++ ()
{
	m_base.Next();
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator ++ (int)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline SimpleIterator< BaseIteratorType, ValueType >  SimpleIterator< BaseIteratorType, ValueType >::operator ++ (int)
{
	Type copy = *this;
	m_base.Next();
	return copy;
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// bool
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator bool () const
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline SimpleIterator< BaseIteratorType, ValueType >::operator bool () const
{
	return m_base.IsValid();
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator ! () const
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline bool SimpleIterator< BaseIteratorType, ValueType >::operator ! () const
{
	return !m_base.IsValid();
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// equality.
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator == ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline bool SimpleIterator< BaseIteratorType, ValueType >::operator == (const Type& it) const
{
	return m_base.IsEqual(it.m_base);
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator != ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline bool SimpleIterator< BaseIteratorType, ValueType >::operator != (const Type& it) const
{
	return !m_base.IsEqual(it.m_base);
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// greater than.
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator > ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline bool SimpleIterator< BaseIteratorType, ValueType >::operator > (const Type& it) const
{
	return m_base.IsGreater(it.m_base);
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// less than.
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::SimpleIterator< BaseIteratorType, ValueType >::operator < ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline bool SimpleIterator< BaseIteratorType, ValueType >::operator < (const Type& it) const
{
	return m_base.IsLess(it.m_base);
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// Front Insert SimpleIterator
//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::FrontInsertIterator< ContainerType >::FrontInsertIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
FrontInsertIterator< ContainerType >::FrontInsertIterator(const Type& it)
{
	m_container = it.m_container;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::FrontInsertIterator< ContainerType >::FrontInsertIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
FrontInsertIterator< ContainerType >::FrontInsertIterator(ContainerType* ct)
{
	RAD_ASSERT(ct);
	m_container = ct;
}

//
// Forward.
//

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::FrontInsertIterator< ContainerType >::operator ++ ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
FrontInsertIterator< ContainerType >& FrontInsertIterator< ContainerType >::operator ++ ()
{
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::FrontInsertIterator< ContainerType >::operator ++ (int)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
FrontInsertIterator< ContainerType >  FrontInsertIterator< ContainerType >::operator ++ (int)
{
	return *this;
}

//
// Access.
//

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::FrontInsertIterator< ContainerType >::operator * ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
FrontInsertIterator< ContainerType >& FrontInsertIterator< ContainerType >::operator * ()
{
	return *this;
}

//
// Assignment
//

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::FrontInsertIterator< ContainerType >::operator = ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
FrontInsertIterator< ContainerType >& FrontInsertIterator< ContainerType >::operator = (const typename ContainerType::ValueType& value)
{
	RAD_ASSERT(m_container);
	m_container->InsertFirst(value);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// Back Insert SimpleIterator
//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BackInsertIterator< ContainerType >::BackInsertIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
BackInsertIterator< ContainerType >::BackInsertIterator(const Type& it)
{
	m_container = it.m_container;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BackInsertIterator< ContainerType >::BackInsertIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
BackInsertIterator< ContainerType >::BackInsertIterator(ContainerType* ct)
{
	RAD_ASSERT(ct);
	m_container = ct;
}

//
// Forward.
//

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BackInsertIterator< ContainerType >::operator ++ ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
BackInsertIterator< ContainerType >& BackInsertIterator< ContainerType >::operator ++ ()
{
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BackInsertIterator< ContainerType >::operator ++ (int)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
BackInsertIterator< ContainerType >  BackInsertIterator< ContainerType >::operator ++ (int)
{
	return *this;
}

//
// Access.
//

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BackInsertIterator< ContainerType >::operator * ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
BackInsertIterator< ContainerType >& BackInsertIterator< ContainerType >::operator * ()
{
	return *this;
}

//
// Assignment
//

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BackInsertIterator< ContainerType >::operator = ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ContainerType >
BackInsertIterator< ContainerType >& BackInsertIterator< ContainerType >::operator = (const typename ContainerType::ValueType& value)
{
	RAD_ASSERT(m_container);
	m_container->InsertLast(value);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// Bidirectional SimpleIterator
//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BDSimpleIterator< BaseIteratorType, ValueType >::BDSimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline BDSimpleIterator< BaseIteratorType, ValueType >::BDSimpleIterator()
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BDSimpleIterator< BaseIteratorType, ValueType >::BDSimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline BDSimpleIterator< BaseIteratorType, ValueType >::BDSimpleIterator(const Type& it) : SimpleIterator< BaseIteratorType, ValueType >(it)
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BDSimpleIterator< BaseIteratorType, ValueType >::BDSimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline BDSimpleIterator< BaseIteratorType, ValueType >::BDSimpleIterator(const BaseIteratorType& it) : SimpleIterator< BaseIteratorType, ValueType >(it)
{
}

//////////////////////////////////////////////////////////////////////////////////////////

//
// Backwards.
//

//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BDSimpleIterator< BaseIteratorType, ValueType >::operator -- ()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline BDSimpleIterator< BaseIteratorType, ValueType >& BDSimpleIterator< BaseIteratorType, ValueType >::operator -- ()
{
	this->m_base.Prev();
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::BDSimpleIterator< BaseIteratorType, ValueType >::operator -- (int)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
inline BDSimpleIterator< BaseIteratorType, ValueType >  BDSimpleIterator< BaseIteratorType, ValueType >::operator -- (int)
{
	BDSimpleIterator< BaseIteratorType, ValueType > copy = *this;
	this->m_base.Prev();
	return copy;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// Random Access SimpleIterator
//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::RASimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType >::RASimpleIterator()
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::RASimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType >::RASimpleIterator(const Type& it) : BDSimpleIterator< BaseIteratorType, ValueType >(it)
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::RASimpleIterator()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType >::RASimpleIterator(const BaseIteratorType& it) : BDSimpleIterator< BaseIteratorType, ValueType >(it)
{
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::operator + (int x)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType > RASimpleIterator< BaseIteratorType, ValueType >::operator + (int x)
{
	Type it = *this;
	it.m_base.Seek(x);
	return it;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::operator += (int x)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType >& RASimpleIterator< BaseIteratorType, ValueType >::operator += (int x)
{
	this->m_base.Seek(x);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::operator - (int x)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType > RASimpleIterator< BaseIteratorType, ValueType >::operator - (int x)
{
	Type it = *this;
	it.m_base.Seek(-x);
	return it;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::operator -= (int x)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
RASimpleIterator< BaseIteratorType, ValueType >& RASimpleIterator< BaseIteratorType, ValueType >::operator -= (int x)
{
	this->m_base.Seek(-x);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::operator [] (int x)
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
ValueType& RASimpleIterator< BaseIteratorType, ValueType >::operator [] (int x)
{
	return this->m_base.ValueAt(x);
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::RASimpleIterator< BaseIteratorType, ValueType >::operator [] (int x) const
//////////////////////////////////////////////////////////////////////////////////////////

template< typename BaseIteratorType, typename ValueType >
const ValueType&	RASimpleIterator< BaseIteratorType, ValueType >::operator [] (int x) const
{
	return this->m_base.ValueAt(x);
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// Iteration Functions
//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::IterateForwards()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ITERATOR, class ITERATOR_CALLBACK >
void RADRT_CALL IterateForwards(const ITERATOR& iterator, ITERATOR_CALLBACK& iteratorCallback)
{
	ITERATOR i = iterator;
	ITERATOR next;

	while (i)
	{
		next = i;
		++next;

		Result r = iteratorCallback.Callback(*i);
		switch(r)
		{
		case RESULT_CONTINUE: i = next; break;
		case RESULT_STOP: return;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////
// iterator::IterateBackwards()
//////////////////////////////////////////////////////////////////////////////////////////

template< typename ITERATOR, class ITERATOR_CALLBACK >
void RADRT_CALL IterateBackwards(const ITERATOR& iterator, ITERATOR_CALLBACK& iteratorCallback)
{
	ITERATOR i = iterator;
	ITERATOR prev;

	while (i)
	{
		prev = i;
		--prev;

		Result r = iteratorCallback.Callback(*i);
		switch(r)
		{
		case RESULT_CONTINUE: i = prev; break;
		case RESULT_STOP: return;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////

} // iterator

