// ConstVolatileTraits.h
// Copyright (c) 2010 Sunside Inc., All Rights Reserved
// Author: Mike Songy
// See Radiance/LICENSE for licensing terms.

#pragma once

#include "../IntegralConstant.h"
#include "ConstTraits.h"
#include "VolatileTraits.h"
#include "../ICE/And.h"


namespace meta {

//////////////////////////////////////////////////////////////////////////////////////////
// meta::IsConstVolatile<T>
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
struct IsConstVolatile : public And<IsConst<T>::VALUE, IsVolatile<T>::VALUE>
{
};

//////////////////////////////////////////////////////////////////////////////////////////
// meta::RemoveConstVolatile<T>
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
struct RemoveConstVolatile
{
	typedef typename RemoveConst<typename RemoveVolatile<T>::Type>::Type Type;
};

//////////////////////////////////////////////////////////////////////////////////////////
// meta::AddConstVolatile<T>
//////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
struct AddConstVolatile
{
	typedef typename AddConst<typename AddVolatile<T>::Type>::Type Type;
};

} // meta

