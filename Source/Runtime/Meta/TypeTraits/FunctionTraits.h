// FunctionTraits.h
//
// Function type traits.
//
// Supports functions with 0-20 arguments.  If more than 20 arguments are needed,
// more specializations of PushArgument<FuncTraits, Arg> and FunctionTraits<Function>
// will need to be generated.
//                                                                                     
// Copyright (c) 2010 Sunside Inc., All Rights Reserved
// Author: Mike Songy
// See Radiance/LICENSE for licensing terms.

#pragma once

#include "PointerTraits.h"
#include "../../Base.h"


namespace meta {

//////////////////////////////////////////////////////////////////////////////////////////
// meta::PushArgument<Function, Arg>
//////////////////////////////////////////////////////////////////////////////////////////
//
// Result types:
//   Type - type of Function with Arg pushed on end of argument list
//
//////////////////////////////////////////////////////////////////////////////////////////

template <typename Function, typename Arg>
struct PushArgument;

//////////////////////////////////////////////////////////////////////////////////////////
// meta::PopArgument<Function>
//////////////////////////////////////////////////////////////////////////////////////////
//
// Result types:
//   Type    - type of Function with last argument popped from argument list
//   ArgType - type of the popped argument 
//
//////////////////////////////////////////////////////////////////////////////////////////

template <typename Function>
struct PopArgument;

//////////////////////////////////////////////////////////////////////////////////////////
// meta::Argument<Function, Index>
//////////////////////////////////////////////////////////////////////////////////////////
//
// Result types:
//   Type - type of argument at Index (0 based)
//
//////////////////////////////////////////////////////////////////////////////////////////

template <typename Function, int Index>
struct Argument;

//////////////////////////////////////////////////////////////////////////////////////////
// meta::FunctionTraits<Function>
//////////////////////////////////////////////////////////////////////////////////////////
//
// Result types:
//   ReturnType - return type of Function
//   PtrType    - pointer type of Function
//
// Result values:
//   int NUM_ARGS - number of arguments to function
//
//////////////////////////////////////////////////////////////////////////////////////////

template <typename Function>
struct FunctionTraits;

} // meta


#include "Private/PrivateFunctionTraits.h"
