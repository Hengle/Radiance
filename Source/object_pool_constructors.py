# object_pool_constructors.py
# Copyright (c) 2010 Sunside Inc., All Rights Reserved
# Author: Joe Riedel
# See Radiance/LICENSE for licensing terms.
# Generates thread_safe_object_pool construct() function

import io
import template_args as z

p = ['', 'const', 'volatile', 'const volatile']
n = 3

print "generating %d template functions (ObjectPool)..." % z.num(p, n)

s = io.open('Runtime/Base/ObjectPoolConstruct.inl', 'w')
s.write(u'// ObjectPoolConstruct.inl\n')
s.write(u'// Copyright (c) 2010 Sunside Inc., All Rights Reserved\n')
s.write(u'// auto generated by Radiance/Source/object_pool_constructors.py\n')
s.write(u'// See Radiance/LICENSE for licensing terms.\n\n')

x = "\
template <$T>\n\
inline T *Construct($A)\n\
{\n\
\tvoid *p = m_memoryPool.GetChunk();\n\
\tif (!p)\n\treturn 0;\n\
\treturn new (p) T($P);\n\
}\n\n\
template <$T>\n\
inline T *SafeConstruct($A)\n\
{\n\
\treturn new (m_memoryPool.SafeGetChunk()) T($P);\n\
}\n\n"

z.gen(p, x, n, s)
s.close()

print "generating %d template functions (ThreadSafeObjectPool)..." % z.num(p, n)

s = io.open('Runtime/Base/ThreadSafeObjectPoolConstruct.inl', 'w')
s.write(u'// ThreadSafeObjectPoolConstruct.inl\n')
s.write(u'// Copyright (c) 2010 Sunside Inc., All Rights Reserved\n')
s.write(u'// auto generated by Radiance/Source/object_pool_constructors.py\n')
s.write(u'// See Radiance/LICENSE for licensing terms.\n\n')

x = "\
template <$T>\n\
inline T *Construct($A)\n\
{\n\
\tvoid *p = m_memoryPool.GetChunk();\n\
\tif (!p)\n\treturn 0;\n\
\treturn new (p) T($P);\n\
}\n\n\
template <$T>\n\
inline T *SafeConstruct($A)\n\
{\n\
\treturn new (m_memoryPool.SafeGetChunk()) T($P);\n\
}\n\n"

z.gen(p, x, n, s)
s.close()
